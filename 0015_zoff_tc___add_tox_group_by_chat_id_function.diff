commit 88d3426f7d0ad321e38950802c90acc75258501b
Author: zoff99 <zoff99@users.noreply.github.com>
Date:   Sat Apr 23 23:26:31 2022 +0200

    0015_zoff_tc___add_tox_group_by_chat_id_function

diff --git a/toxcore/tox.c b/toxcore/tox.c
index b240c5165..6098dc815 100644
--- a/toxcore/tox.c
+++ b/toxcore/tox.c
@@ -3801,6 +3801,38 @@ void tox_group_get_grouplist(const Tox *tox, uint32_t *grouplist)
     tox_unlock(tox);
 }
 
+uint32_t tox_group_by_chat_id(const Tox *tox, const uint8_t *chat_id, Tox_Err_Group_State_Queries *error)
+{
+    assert(tox != nullptr);
+
+    if (chat_id == nullptr) {
+        SET_ERROR_PARAMETER(error, TOX_ERR_GROUP_STATE_QUERIES_GROUP_NOT_FOUND);
+        return UINT32_MAX;
+    }
+
+    tox_lock(tox);
+    const GC_Chat *chat = gc_get_group_by_public_key(tox->m->group_handler, chat_id);
+
+    if (chat == nullptr)
+    {
+        SET_ERROR_PARAMETER(error, TOX_ERR_GROUP_STATE_QUERIES_GROUP_NOT_FOUND);
+        return UINT32_MAX;
+        tox_unlock(tox);
+    }
+
+    uint32_t ret = chat->group_number;
+    tox_unlock(tox);
+
+    if (ret == -1) {
+        SET_ERROR_PARAMETER(error, TOX_ERR_GROUP_STATE_QUERIES_GROUP_NOT_FOUND);
+        return UINT32_MAX;
+    }
+
+    SET_ERROR_PARAMETER(error, TOX_ERR_GROUP_STATE_QUERIES_OK);
+    assert(ret >= 0);
+    return ret;
+}
+
 Tox_Group_Privacy_State tox_group_get_privacy_state(const Tox *tox, uint32_t group_number,
         Tox_Err_Group_State_Queries *error)
 {
diff --git a/toxcore/tox.h b/toxcore/tox.h
index 7a28235a2..fb18f20ca 100644
--- a/toxcore/tox.h
+++ b/toxcore/tox.h
@@ -4353,6 +4353,8 @@ uint32_t tox_group_get_number_groups(const Tox *tox);
  */
 void tox_group_get_grouplist(const Tox *tox, uint32_t *grouplist);
 
+uint32_t tox_group_by_chat_id(const Tox *tox, const uint8_t *chat_id, Tox_Err_Group_State_Queries *error);
+
 /**
  * Return the privacy state of the group designated by the given group number. If group number
  * is invalid, the return value is unspecified.
