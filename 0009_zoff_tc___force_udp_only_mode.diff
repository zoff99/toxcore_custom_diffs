commit 23731a319f0fbec7b2b60ca71c390a080958cc30
Author: zoff99 <zoff99@users.noreply.github.com>
Date:   Fri Apr 22 19:52:53 2022 +0200

    0009_zoff_tc___force_udp_only_mode

diff --git a/toxcore/Messenger.c b/toxcore/Messenger.c
index bd2cb6489..e36c4af55 100644
--- a/toxcore/Messenger.c
+++ b/toxcore/Messenger.c
@@ -44,6 +44,7 @@
  * someone wanted not to include tox.h here
  */
 
+extern bool global_force_udp_only_mode;
 
 static_assert(MAX_CONCURRENT_FILE_PIPES <= UINT8_MAX + 1,
               "uint8_t cannot represent all file transfer numbers");
@@ -3301,18 +3302,19 @@ static uint8_t *save_tcp_relays(const Messenger *m, uint8_t *data)
 non_null()
 static State_Load_Status load_tcp_relays(Messenger *m, const uint8_t *data, uint32_t length)
 {
-    if (length > 0) {
-        const int num = unpack_nodes(m->loaded_relays, NUM_SAVED_TCP_RELAYS, nullptr, data, length, true);
+    if (!global_force_udp_only_mode) {
+        if (length > 0) {
+            const int num = unpack_nodes(m->loaded_relays, NUM_SAVED_TCP_RELAYS, nullptr, data, length, true);
 
-        if (num == -1) {
-            m->num_loaded_relays = 0;
-            return STATE_LOAD_STATUS_CONTINUE;
-        }
+            if (num == -1) {
+                m->num_loaded_relays = 0;
+                return STATE_LOAD_STATUS_CONTINUE;
+            }
 
-        m->num_loaded_relays = num;
-        m->has_added_relays = false;
+            m->num_loaded_relays = num;
+            m->has_added_relays = false;
+        }
     }
-
     return STATE_LOAD_STATUS_CONTINUE;
 }
 
diff --git a/toxcore/friend_connection.c b/toxcore/friend_connection.c
index 5ff016ed2..f8fc51c84 100644
--- a/toxcore/friend_connection.c
+++ b/toxcore/friend_connection.c
@@ -17,6 +17,8 @@
 
 #define PORTS_PER_DISCOVERY 10
 
+extern bool global_force_udp_only_mode;
+
 typedef struct Friend_Conn_Callbacks {
     fc_status_cb *status_callback;
     fc_data_cb *data_callback;
@@ -225,37 +227,41 @@ non_null()
 static int friend_add_tcp_relay(Friend_Connections *fr_c, int friendcon_id, const IP_Port *ip_port,
                                 const uint8_t *public_key)
 {
-    IP_Port ipp_copy = *ip_port;
+    if (!global_force_udp_only_mode) {
+        IP_Port ipp_copy = *ip_port;
 
-    Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
+        Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
 
-    if (friend_con == nullptr) {
-        return -1;
-    }
+        if (friend_con == nullptr) {
+            return -1;
+        }
 
-    /* Local ip and same pk means that they are hosting a TCP relay. */
-    if (ip_is_local(&ipp_copy.ip) && pk_equal(friend_con->dht_temp_pk, public_key)) {
-        if (!net_family_is_unspec(friend_con->dht_ip_port.ip.family)) {
-            ipp_copy.ip = friend_con->dht_ip_port.ip;
-        } else {
-            friend_con->hosting_tcp_relay = 0;
+        /* Local ip and same pk means that they are hosting a TCP relay. */
+        if (ip_is_local(&ipp_copy.ip) && pk_equal(friend_con->dht_temp_pk, public_key)) {
+            if (!net_family_is_unspec(friend_con->dht_ip_port.ip.family)) {
+                ipp_copy.ip = friend_con->dht_ip_port.ip;
+            } else {
+                friend_con->hosting_tcp_relay = 0;
+            }
         }
-    }
 
-    const uint16_t index = friend_con->tcp_relay_counter % FRIEND_MAX_STORED_TCP_RELAYS;
+        const uint16_t index = friend_con->tcp_relay_counter % FRIEND_MAX_STORED_TCP_RELAYS;
 
-    for (unsigned i = 0; i < FRIEND_MAX_STORED_TCP_RELAYS; ++i) {
-        if (!net_family_is_unspec(friend_con->tcp_relays[i].ip_port.ip.family)
-                && pk_equal(friend_con->tcp_relays[i].public_key, public_key)) {
-            friend_con->tcp_relays[i] = empty_node_format;
+        for (unsigned i = 0; i < FRIEND_MAX_STORED_TCP_RELAYS; ++i) {
+            if (!net_family_is_unspec(friend_con->tcp_relays[i].ip_port.ip.family)
+                    && pk_equal(friend_con->tcp_relays[i].public_key, public_key)) {
+                friend_con->tcp_relays[i] = empty_node_format;
+            }
         }
-    }
 
-    friend_con->tcp_relays[index].ip_port = ipp_copy;
-    memcpy(friend_con->tcp_relays[index].public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
-    ++friend_con->tcp_relay_counter;
+        friend_con->tcp_relays[index].ip_port = ipp_copy;
+        memcpy(friend_con->tcp_relays[index].public_key, public_key, CRYPTO_PUBLIC_KEY_SIZE);
+        ++friend_con->tcp_relay_counter;
 
-    return add_tcp_relay_peer(fr_c->net_crypto, friend_con->crypt_connection_id, &ipp_copy, public_key);
+        return add_tcp_relay_peer(fr_c->net_crypto, friend_con->crypt_connection_id, &ipp_copy, public_key);
+    } else {
+        return -1;
+    }
 }
 
 /** Connect to number saved relays for friend. */
@@ -283,59 +289,67 @@ static void connect_to_saved_tcp_relays(Friend_Connections *fr_c, int friendcon_
 non_null()
 static unsigned int send_relays(Friend_Connections *fr_c, int friendcon_id)
 {
-    Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
+    if (!global_force_udp_only_mode) {
+        Friend_Conn *const friend_con = get_conn(fr_c, friendcon_id);
 
-    if (friend_con == nullptr) {
-        return 0;
-    }
+        if (friend_con == nullptr) {
+            return 0;
+        }
 
-    Node_format nodes[MAX_SHARED_RELAYS] = {{{0}}};
-    uint8_t data[1024];
+        Node_format nodes[MAX_SHARED_RELAYS] = {{{0}}};
+        uint8_t data[1024];
 
-    const uint32_t n = copy_connected_tcp_relays_index(fr_c->net_crypto, nodes, MAX_SHARED_RELAYS,
-                       friend_con->tcp_relay_share_index);
+        const uint32_t n = copy_connected_tcp_relays_index(fr_c->net_crypto, nodes, MAX_SHARED_RELAYS,
+                           friend_con->tcp_relay_share_index);
 
-    friend_con->tcp_relay_share_index += MAX_SHARED_RELAYS;
+        friend_con->tcp_relay_share_index += MAX_SHARED_RELAYS;
 
-    for (uint32_t i = 0; i < n; ++i) {
-        /* Associated the relays being sent with this connection.
-         * On receiving the peer will do the same which will establish the connection. */
-        friend_add_tcp_relay(fr_c, friendcon_id, &nodes[i].ip_port, nodes[i].public_key);
-    }
+        for (uint32_t i = 0; i < n; ++i) {
+            /* Associated the relays being sent with this connection.
+             * On receiving the peer will do the same which will establish the connection. */
+            friend_add_tcp_relay(fr_c, friendcon_id, &nodes[i].ip_port, nodes[i].public_key);
+        }
 
-    int length = pack_nodes(fr_c->logger, data + 1, sizeof(data) - 1, nodes, n);
+        int length = pack_nodes(fr_c->logger, data + 1, sizeof(data) - 1, nodes, n);
 
-    if (length <= 0) {
-        return 0;
-    }
+        if (length <= 0) {
+            return 0;
+        }
 
-    data[0] = PACKET_ID_SHARE_RELAYS;
-    ++length;
+        data[0] = PACKET_ID_SHARE_RELAYS;
+        ++length;
 
-    if (write_cryptpacket(fr_c->net_crypto, friend_con->crypt_connection_id, data, length, false) != -1) {
-        friend_con->share_relays_lastsent = mono_time_get(fr_c->mono_time);
+        if (write_cryptpacket(fr_c->net_crypto, friend_con->crypt_connection_id, data, length, false) != -1) {
+            friend_con->share_relays_lastsent = mono_time_get(fr_c->mono_time);
+            return 1;
+        }
+
+        return 0;
+    } else {
         return 1;
     }
-
-    return 0;
 }
 
 /** callback for recv TCP relay nodes. */
 non_null()
 static int tcp_relay_node_callback(void *object, uint32_t number, const IP_Port *ip_port, const uint8_t *public_key)
 {
-    Friend_Connections *fr_c = (Friend_Connections *)object;
-    const Friend_Conn *friend_con = get_conn(fr_c, number);
+    if (!global_force_udp_only_mode) {
+        Friend_Connections *fr_c = (Friend_Connections *)object;
+        const Friend_Conn *friend_con = get_conn(fr_c, number);
 
-    if (friend_con == nullptr) {
-        return -1;
-    }
+        if (friend_con == nullptr) {
+            return -1;
+        }
 
-    if (friend_con->crypt_connection_id != -1) {
-        return friend_add_tcp_relay(fr_c, number, ip_port, public_key);
-    }
+        if (friend_con->crypt_connection_id != -1) {
+            return friend_add_tcp_relay(fr_c, number, ip_port, public_key);
+        }
 
-    return add_tcp_relay(fr_c->net_crypto, ip_port, public_key);
+        return add_tcp_relay(fr_c->net_crypto, ip_port, public_key);
+    } else {
+        return -1;
+    }
 }
 
 non_null()
diff --git a/toxcore/tox.c b/toxcore/tox.c
index 4020e575e..0654ef406 100644
--- a/toxcore/tox.c
+++ b/toxcore/tox.c
@@ -4940,3 +4940,8 @@ void tox_logmsg(const Tox *tox, Logger_Level level, const char *file, int line,
     va_end(args);
     tox_unlock(tox);
 }
+
+void tox_set_force_udp_only_mode(bool value)
+{
+    global_force_udp_only_mode = value;
+}
diff --git a/toxcore/tox.h b/toxcore/tox.h
index 7c9c4cc73..72c185b48 100644
--- a/toxcore/tox.h
+++ b/toxcore/tox.h
@@ -384,6 +384,7 @@ uint32_t tox_max_hostname_length(void);
 
 /** @} */
 
+void tox_set_force_udp_only_mode(bool value);
 
 /** @{
  * @name Global enumerations
